import proguard.gradle.ProGuardTask

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.5.0'
    }
}

plugins {
    id 'application'
    id 'java'
    id "org.sonarqube" version "4.4.1.3373"
    id "jacoco"
}

group 'com.cogover'
version '1.0'

repositories {
    mavenCentral()

    maven {
        url 'https://repositories.stringee.com:8843/repository/maven-snapshots/'
        credentials {
            username = "java"
            password = "ZmDwMe2r9NdxQLX6tAu4pBzVhUW8KPJf"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'lib')

    //tests
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.3'
    testImplementation 'org.mockito:mockito-core:5.12.0'

    //log4j
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.24.3'
    implementation 'org.apache.logging.log4j:log4j-api:2.24.3'
    implementation 'org.apache.logging.log4j:log4j-core:2.24.3'
    //ASYNC log4j
    implementation 'com.lmax:disruptor:4.0.0'

    //hibernate 6
    implementation 'org.hibernate.orm:hibernate-core:6.6.13.Final'
    implementation 'org.hibernate.orm:hibernate-c3p0:6.6.13.Final'
    implementation 'com.mysql:mysql-connector-j:9.2.0'

    //vault
    implementation 'com.bettercloud:vault-java-driver:5.1.0'
    implementation 'software.amazon.awssdk:secretsmanager:2.26.25'

    //kafka
    implementation 'org.apache.kafka:kafka-clients:4.0.0'

    //lombok
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    testCompileOnly 'org.projectlombok:lombok:1.18.38'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'

    //yaml, json
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.18.3'

    //httpclient
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.4.3'

    //dung cho viec giai ma va bam mat khau
    implementation 'org.springframework.security:spring-security-crypto:6.4.5'

    //mongo
    implementation 'org.mongodb:mongodb-driver-core:5.4.0'
    implementation 'org.mongodb:mongodb-driver-sync:5.4.0'

    //su dung cho RPC
    //van dung org.json vi su linh hoat
    implementation 'org.json:json:20250107'
    //netty
    implementation 'io.netty:netty-all:4.2.0.Final'

    //jwt
    implementation 'com.auth0:java-jwt:4.5.0'

    //redis
    implementation 'org.redisson:redisson:3.45.1'

    implementation 'com.cogover:cogover-java-common:1.3.30-SNAPSHOT'

    implementation 'com.cogover:cogover-rpc:5.0.2-SNAPSHOT'

    //opentelemetry
    implementation 'io.opentelemetry:opentelemetry-api:1.42.1'
    //
    implementation 'io.opentelemetry:opentelemetry-sdk:1.42.1'
    runtimeOnly 'io.opentelemetry:opentelemetry-exporter-otlp-common:1.42.1'
    implementation 'io.opentelemetry:opentelemetry-exporter-logging:1.42.1'
    implementation 'io.opentelemetry:opentelemetry-exporter-otlp:1.42.1'
    implementation("io.opentelemetry.semconv:opentelemetry-semconv:1.27.0-alpha");

    implementation("com.fasterxml.jackson.core:jackson-databind:2.18.3")

    implementation("io.javalin:javalin:6.6.0")

    //mapstruct
    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
}

application {
    mainClass = 'com.cogover.template.server.Start'
}

test {
    useJUnitPlatform()

    //chay xong Junit thi chay jacocoTestReport
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    // tests are required to run before generating the report
    dependsOn test

    reports {
        //Duong dan report XML: ./build/reports/jacoco/test/jacocoTestReport.xml
        xml.required = true
    }
}

tasks.register('cleanDeployDir', Delete) {
    delete '_deploy'
    delete 'log'
}

// chay xong task 'clean' thi chay task 'cleanDeployDir'
clean.finalizedBy(project.tasks.cleanDeployDir)

//1. task nay chay truoc
jar {
    archiveFileName = "App_no_obfuscation.jar"

    // Keep jar clean:
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'
    manifest {
        attributes 'Main-Class': 'com.cogover.template.server.Start',
                'Class-Path': configurations.runtimeClasspath.files.collect { "lib/$it.name" }.join(' ')
    }
}

//2. copy lib
tasks.register('copyLibToDeployDir') {
    delete fileTree('_deploy/lib').matching {
        include '**/*.*'
    }

    delete fileTree("build/tmp_lib").matching {
        include '**/*.*'
    }

    copy {
        from configurations.runtimeClasspath
        //copy vao day de proguard su dung
        into "build/tmp_lib"
    }

    copy {
        from "build/tmp_lib"
        into "_deploy/lib"
    }

    //xoa cac thu vien da lam roi
    delete fileTree('_deploy/lib') {
        include '**/cogover-rpc*.jar'
        include '**/cluster-manager*.jar'
        include '**/cogover-java-common-*.jar'
    }

    copy {
        from "config-sample"
        into "_deploy/config"
    }

    copy {
        from "exporter"
        into "_deploy/exporter"
    }

    copy {
        from "deployment/Dockerfile"
        into "_deploy/"
    }
}

//3. Lam roi code
tasks.register('jarObfuscate', ProGuardTask) {
    delete files("_deploy/App.jar")

    outputs.upToDateWhen { false }
    configuration 'proguard-app.pro'
}

//Chay cac task: jar => copyLibToDeployDir => jarObfuscate
jar.finalizedBy(project.tasks.copyLibToDeployDir)
copyLibToDeployDir.finalizedBy(project.tasks.jarObfuscate)
